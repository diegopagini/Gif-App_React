{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","placeholder","onChange","target","proptypes","PropTypes","func","isRequired","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8MAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAiBjD,OACC,sBAAMC,SAXc,SAACC,GACrBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKf,SAEC,uBACCO,KAAK,OACLC,MAAOT,EACPU,YAAY,iBACZC,SArBuB,SAACR,GAC1BF,EAAcE,EAAES,OAAOH,aA2BzBZ,EAAYgB,UAAY,CACvBf,cAAegB,IAAUC,KAAKC,Y,YCjClBC,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACxC,OACC,sBAAKC,UAAU,yCAAf,UACC,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNMK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCACF,GAERN,EAJgB,iDAIgCO,UACrDF,GALqB,kBAER,GAFQ,oBACN,oCADM,SAQHG,MAAMR,GARH,cAQhBS,EARgB,gBAUCA,EAAKC,OAVN,uBAUdC,EAVc,EAUdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAfd,kBAmBfY,GAnBe,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACf1B,mBAAS,CAClCgC,KAAM,GACNO,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAYzC,OANAC,qBAAU,WACTjB,EAAQC,GAAUiB,MAAK,SAACR,GACvBM,EAAS,CAAET,KAAMG,EAAKI,SAAS,SAE9B,CAACb,IAEGc,EDV2BI,CAAalB,GAAjCU,EAD0B,EAChCJ,KAAcO,EADkB,EAClBA,QAEtB,OACC,qCACC,oBAAIjB,UAAU,+CAAd,SACEI,IAGDa,EACA,mBAAGjB,UAAU,2CAAb,qBACG,KAGJ,qBAAKA,UAAU,8CAAf,SACEc,EAAOF,KAAI,SAACC,GACZ,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEWnB0B,EA5BM,WAAM,MAEU7C,mBAAS,CAAC,KAFpB,mBAEnBQ,EAFmB,KAEPT,EAFO,KAa1B,OACC,qCACC,oBAAIuB,UAAU,QAAd,0BAEA,cAAC,EAAD,CAAavB,cAAeA,IAC5B,uBAICS,EAAW0B,KAAI,SAACR,GAAD,OACf,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,UCdHoB,EAZS,SAACC,GACpBA,GAAeA,aAAuBC,UACzC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDXO,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAK1DX,M","file":"static/js/main.b7843d83.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\t// Data binding de React\r\n\tconst [inputValue, setInputValue] = useState(''); //Dejar como un string vacio para evitar el warning y que no sea undefined\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault(); //Para evitar que recargue toda la pagina\r\n\t\t// console.log('Submit hecho');\r\n\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\tsetCategories((categories) => [inputValue, ...categories]);\r\n\t\t\tsetInputValue('');\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t{/* <h1>{inputValue}</h1> */}\r\n\t\t\t<input\r\n\t\t\t\ttype='text'\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\tplaceholder='Busca tus Gifs'\r\n\t\t\t\tonChange={handleInputChange}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\n// eslint-disable-next-line react/no-typos\r\nAddCategory.proptypes = {\r\n\tsetCategories: PropTypes.func.isRequired,\r\n};\r\n","/** @format */\r\n\r\nimport React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\treturn (\r\n\t\t<div className='card animate__animated animate__fadeIn'>\r\n\t\t\t<img src={url} alt={title} />\r\n\t\t\t<p>{title}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","/** @format */\r\n\r\nexport const getGifs = async (category) => {\r\n\tconst API_KEY = 'IOKixTh0CF2zErhoctHCjTKpJUJN6XAQ';\r\n\tconst LIMIT = 10;\r\n\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n\t\tcategory\r\n\t)}&limit=${LIMIT}&api_key=${API_KEY}`;\r\n\r\n\tconst resp = await fetch(url);\r\n\r\n\tconst { data } = await resp.json();\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\r\n\treturn gifs;\r\n};\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className='card-title animate__animated animate__fadeIn'>\r\n\t\t\t\t{category}\r\n\t\t\t</h3>\r\n\r\n\t\t\t{loading ? (\r\n\t\t\t\t<p className='loading animate__animated animate__flash'>Loading</p>\r\n\t\t\t) : null}\r\n\t\t\t{/* {loading && <p>Loading</p>} */}\r\n\r\n\t\t\t<div className='card-grid animate__animated animate__fadeIn'>\r\n\t\t\t\t{images.map((img) => {\r\n\t\t\t\t\treturn <GifGridItem key={img.id} {...img} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","/** @format */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setstate] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then((img) => {\r\n\t\t\tsetstate({ data: img, loading: false });\r\n\t\t});\r\n\t}, [category]);\r\n\r\n\treturn state;\r\n};\r\n","/** @format */\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\t// const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\tconst [categories, setCategories] = useState(['']);\r\n\r\n\t// const handleAdd = () => {\r\n\t// No se debe modificar el estado anterior, por eso no se utilizar el \"push\"\r\n\t// setCategories([...categories, 'HunterXHunter']);\r\n\t// Si quisiera que este al comienzo del array\r\n\t// setCategories(['HunterXHunter', ...categories]);\r\n\t// Otra forma de agregar\r\n\t// setCategories((cats) => [...cats, 'HunterXHunter']);\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2 className='title'>GifExpertApp</h2>\r\n\t\t\t{/* Nombre de la propiedad primero, luego el nombre del metodo */}\r\n\t\t\t<AddCategory setCategories={setCategories} />\r\n\t\t\t<hr />\r\n\t\t\t{/* <button onClick={handleAdd}>Agregar</button> */}\r\n\t\t\t{/* como el ngFor de Angular: */}\r\n\r\n\t\t\t{categories.map((category) => (\r\n\t\t\t\t<GifGrid key={category} category={category} />\r\n\t\t\t))}\r\n\t\t</>\r\n\t);\r\n};\r\nexport default GifExpertApp;\r\n","/** @format */\n\nconst reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","/** @format */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}